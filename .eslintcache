[{"C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\reportWebVitals.js":"1","C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\addKeyword\\addKeyword.js":"2","C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\updateGuru\\updateGuru.js":"3","C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\Layout\\Footer\\Footer.jsx":"4","C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\addAvailability\\addAvailability.js":"5","C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\App.js":"6","C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\index.js":"7","C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\addCategory\\addCategory.js":"8","C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\viewAllGurus\\viewAllGurus.js":"9","C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\addNewGuru\\addNewGuru.js":"10","C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\addNewVideo\\addNewVideo.js":"11","C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\addFilter\\addFilter.js":"12","C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\routes.js":"13","C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\Layout\\Layout.jsx":"14","C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\Layout\\TopNavBar\\TopNavBar.jsx":"15","C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\Layout\\Banner\\Banner.js":"16"},{"size":362,"mtime":1606442108006,"results":"17","hashOfConfig":"18"},{"size":4866,"mtime":1610103969010,"results":"19","hashOfConfig":"20"},{"size":48415,"mtime":1610738677483,"results":"21","hashOfConfig":"20"},{"size":5281,"mtime":1610013495628,"results":"22","hashOfConfig":"20"},{"size":16573,"mtime":1610443009754,"results":"23","hashOfConfig":"20"},{"size":1663,"mtime":1610096002018,"results":"24","hashOfConfig":"20"},{"size":319,"mtime":1610014471742,"results":"25","hashOfConfig":"20"},{"size":4876,"mtime":1610104036305,"results":"26","hashOfConfig":"20"},{"size":7206,"mtime":1610738334704,"results":"27","hashOfConfig":"20"},{"size":32428,"mtime":1610722656049,"results":"28","hashOfConfig":"20"},{"size":28261,"mtime":1610740653154,"results":"29","hashOfConfig":"20"},{"size":4875,"mtime":1610104113294,"results":"30","hashOfConfig":"20"},{"size":1244,"mtime":1610028536908,"results":"31","hashOfConfig":"20"},{"size":780,"mtime":1610012749198,"results":"32","hashOfConfig":"20"},{"size":6610,"mtime":1610014518878,"results":"33","hashOfConfig":"20"},{"size":239,"mtime":1610022685160,"results":"34","hashOfConfig":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"545yc0",{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"40"},"156o7o3",{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\reportWebVitals.js",[],"C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\addKeyword\\addKeyword.js",["74","75"],"import React,{useEffect, useState,useRef} from 'react'\r\nimport {ListBox} from \"primereact/listbox\";\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { Button } from \"primereact/button\";\r\nimport { Toast } from 'primereact/toast';\r\nimport Banner from '../Layout/Banner/Banner';\r\nimport { Container,Row,Col,Spinner,Alert } from 'reactstrap';\r\nimport \"./style.css\";\r\nfunction AddKeyword() {\r\n    const toast = useRef(null);\r\n    const toast1 = useRef(null);\r\n    const [keywords,setKeywords] = useState([]);\r\n    const [loading,setLoading] = useState(true);\r\n    const [fetching,setFetching] = useState(false);\r\n    const [inProgress,setInProgress] = useState(false);\r\n    const [name,setName] = useState(\"\");\r\n    const showSuccess = () => {\r\n        toast.current.show({severity:'success', summary: 'Category added', detail:`${name} has been added`, life: 3000});\r\n    }\r\n    const showError = () => {\r\n        toast1.current.show({severity:'error', summary: 'Failed to add', detail:'Please try again with a different name', life: 3000});\r\n    }\r\n    const fetchCategories = ()=>{\r\n        if(!loading){\r\n            setFetching(true);\r\n        }\r\n        fetch(`https://la6s3169jc.execute-api.us-east-2.amazonaws.com/v1/skillset`).then(response=>{\r\n                if(response.ok){\r\n                    return response.json();\r\n                }\r\n            }).then(jsonResponse=>{\r\n                return jsonResponse;\r\n            })\r\n            .then(result=>{\r\n                setKeywords(result.body);\r\n                if(loading){\r\n                    setLoading(false);\r\n                }\r\n                setFetching(false);\r\n            }).catch(error=>{\r\n                console.log(error);\r\n            });\r\n    }\r\n    useEffect(()=>{\r\n        fetchCategories();\r\n    },[]);\r\n    const itemTemplate = (option) => {\r\n        return (\r\n            <h5 id={option.ID}>{option.name}</h5>\r\n        );\r\n    }\r\n    const handleAdd = ()=>{\r\n        setInProgress(true);\r\n        const fetchOptions = {\r\n            method:\"POST\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\"\r\n            },\r\n            body: JSON.stringify({name:name})\r\n        }\r\n        fetch(`https://la6s3169jc.execute-api.us-east-2.amazonaws.com/v1/skillset`,fetchOptions).then(response=>{\r\n            if(response.statusCode===201){\r\n                return response.json();\r\n            }\r\n            else{\r\n                showError();\r\n            }\r\n        }).then(jsonResponse=>{\r\n            return jsonResponse;\r\n        }).then(()=>{\r\n            setInProgress(false);\r\n            showSuccess();\r\n            setName(\"\");\r\n            fetchCategories();\r\n        })\r\n    }\r\n    return (\r\n        <div>\r\n            <Toast ref={toast} position=\"bottom-right\" />\r\n            <Toast ref={toast1} position=\"bottom-right\" />\r\n            {loading?\r\n                <div className=\"loader-container\">\r\n                    <div id=\"preloader\">\r\n                        <div id=\"status\">\r\n                        <div className=\"spinner\">\r\n                            <div className=\"double-bounce1\" />\r\n                            <div className=\"double-bounce2\" />\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                :\r\n                <>\r\n                    <Banner title=\"Add Keyword\"/>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col md={6} className=\"left-container\">\r\n                            {fetching?\r\n                            <>\r\n                                <Spinner color=\"primary\"/>\r\n                            </>\r\n                            :\r\n                            <>\r\n                                <h3 className=\"left-heading\">Keywords</h3>\r\n                                <ListBox options={keywords} filter optionLabel=\"name\"\r\n                                    itemTemplate={itemTemplate} className=\"category-list\" />\r\n                            </>}\r\n                            </Col>\r\n                            <Col md={6} className=\"right-container\">\r\n                            <h4 className=\"left-heading\">Add new Keyword</h4>\r\n                            <div className=\"p-inputgroup\">\r\n                                <InputText placeholder=\"Enter Name\" id=\"filter-name\" onChange={(event)=>{\r\n                                    setName(event.target.value);\r\n                                }} value={name}/>\r\n                                {inProgress?<Spinner color=\"primary\"/>:<Button label=\"Add\" onClick={handleAdd}/>}\r\n                            </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddKeyword\r\n\r\n\r\n",["76","77"],"C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\updateGuru\\updateGuru.js",["78","79","80","81"],"C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\Layout\\Footer\\Footer.jsx",[],"C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\addAvailability\\addAvailability.js",["82","83","84"],"import React, { useEffect, useState, useRef} from 'react'\r\nimport { Container, Row, Col, FormGroup, Spinner,Label } from 'reactstrap';\r\nimport { enGB } from 'date-fns/locale';\r\nimport { DatePickerCalendar } from 'react-nice-dates';\r\nimport { Calendar } from 'primereact/calendar';\r\nimport { InputNumber } from 'primereact/inputnumber';\r\nimport { TabView, TabPanel } from 'primereact/tabview';\r\nimport {Toast} from \"primereact/toast\";\r\nimport {useLocation} from \"react-router-dom\";\r\nimport 'react-nice-dates/build/style.css';\r\nimport \"./style.css\";\r\nimport { format } from 'date-fns';\r\nfunction AddAvailability() {\r\n    const query = new URLSearchParams(useLocation().search);\r\n    const toast = useRef(null);\r\n    const toast1 = useRef(null);\r\n    const [date,setDate] = useState(null);\r\n    const [availability,setAvailability] = useState(null);\r\n    const [cost,setCost] = useState(30);\r\n    const [note,setNote] = useState(\"\");\r\n    const [id,setId] = useState(803615196);\r\n    const [startTime,setStartTime] = useState(new Date(\"Mon Jan 11 2021 8:30:01 GMT+0530 (India Standard Time)\"));\r\n    const [duration,setDuration] = useState(15);\r\n    const [loading,setLoading] = useState(false);\r\n    const [uploading,setUploading] = useState(false);\r\n    const [activeIndex,setActiveIndex] = useState(0);\r\n    const fillSlots = (input)=>{\r\n        try{\r\n            document.getElementById('morningList').innerHTML = '';\r\n            document.getElementById('afternoonList').innerHTML = '';\r\n            document.getElementById('eveningList').innerHTML = '';\r\n            let selected=date;\r\n            if(input){\r\n              selected=input;\r\n            }\r\n            availability.forEach((a) => {\r\n            if (a.Date === format(selected, 'yyyy/MM/dd', { locale: enGB })) {\r\n                const listHeading = document.createElement('li');\r\n                listHeading.className = 'heading';\r\n                listHeading.textContent = 'Morning';\r\n                document.getElementById('morningList').appendChild(listHeading);\r\n                const listHeading1 = document.createElement('li');\r\n                listHeading1.className = 'heading';\r\n                listHeading1.textContent = 'Afternoon';\r\n                document.getElementById('afternoonList').appendChild(listHeading1);\r\n                const listHeading2 = document.createElement('li');\r\n                listHeading2.className = 'heading';\r\n                listHeading2.textContent = 'Evening';\r\n                document.getElementById('eveningList').appendChild(listHeading2);\r\n                a.timeSlots.forEach((timeSlot) => {\r\n                let listName;\r\n                if (timeSlot.startAt.split(':')[0] <= 11) {\r\n                    listName = document.getElementById('morningList');\r\n                } else if (\r\n                    timeSlot.startAt.split(':')[0] >= 12 &&\r\n                    timeSlot.startAt.split(':')[0] <= 16\r\n                ) {\r\n                    listName = document.getElementById('afternoonList');\r\n                } else {\r\n                    listName = document.getElementById('eveningList');\r\n                }\r\n                const listElement = document.createElement('li');\r\n                listElement.className = 'timeSlot';\r\n                listElement.onclick = () => {\r\n                    listElement.classList.contains('active')\r\n                    ? listElement.classList.remove('active')\r\n                    : listElement.classList.add('active');\r\n                };\r\n                listElement.textContent = timeSlot.startAt;\r\n                listName.appendChild(listElement);\r\n                });\r\n            }\r\n        });\r\n        }\r\n        catch(e){\r\n            console.log(e);\r\n        }\r\n        \r\n    }\r\n    const fetchAvailability = () =>{\r\n        setLoading(true);\r\n        //setId(query.get(\"id\"));\r\n        setAvailability( [\r\n            {\r\n              GuruID: '803615196',\r\n              Date: '2020/12/31',\r\n              timeSlots: [\r\n                {\r\n                  notes: ' Test1',\r\n                  cost: {\r\n                    minor: 10,\r\n                    currencyCode: '£',\r\n                    Major: 24\r\n                  },\r\n                  timeZone: 'GMT',\r\n                  durationMins: 15,\r\n                  ID: '574972432',\r\n                  startAt: '15:00',\r\n                  updateHistory: [\r\n                    {\r\n                      updateTimeStamp: '1609666586',\r\n                      status: 'Reserved'\r\n                    },\r\n                    {\r\n                      updateTimeStamp: '1609666586',\r\n                      status: 'Available'\r\n                    },\r\n                    {\r\n                      updateTimeStamp: '1609666586',\r\n                      status: 'Reserved'\r\n                    },\r\n                    {\r\n                      updateTimeStamp: '1609666586',\r\n                      status: 'Available'\r\n                    },\r\n                    {\r\n                      updateTimeStamp: '1609666586',\r\n                      status: 'Reserved'\r\n                    }\r\n                  ],\r\n                  status: 'Reserved'\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              GuruID: '803615196',\r\n              Date: '2021/01/01',\r\n              timeSlots: [\r\n                {\r\n                  notes: ' Test1',\r\n                  cost: {\r\n                    minor: 10,\r\n                    currencyCode: '£',\r\n                    Major: 24\r\n                  },\r\n                  timeZone: 'GMT',\r\n                  durationMins: 15,\r\n                  ID: '249110224',\r\n                  startAt: '13:00',\r\n                  updateHistory: [\r\n                    {\r\n                      updateTimeStamp: '1609666586',\r\n                      status: 'Available'\r\n                    },\r\n                    {\r\n                      updateTimeStamp: '1609666586',\r\n                      status: 'Booked'\r\n                    },\r\n                    {\r\n                      updateTimeStamp: '1609666586',\r\n                      status: 'Reserved'\r\n                    }\r\n                  ],\r\n                  status: 'Reserved'\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              GuruID: '803615196',\r\n              Date: '2021/01/07',\r\n              timeSlots: [\r\n                {\r\n                  notes: ' This is a very good session',\r\n                  cost: {\r\n                    minor: 0,\r\n                    currencyCode: '£',\r\n                    Major: 30\r\n                  },\r\n                  timeZone: 'GMT',\r\n                  durationMins: 15,\r\n                  ID: '873913521',\r\n                  startAt: '10:30',\r\n                  status: 'Available'\r\n                },\r\n                {\r\n                  notes: ' This is a very good session',\r\n                  cost: {\r\n                    minor: 0,\r\n                    currencyCode: '£',\r\n                    Major: 30\r\n                  },\r\n                  timeZone: 'GMT',\r\n                  durationMins: 15,\r\n                  ID: '817110287',\r\n                  startAt: '11:30',\r\n                  status: 'Available'\r\n                },\r\n                {\r\n                  notes: ' This is a very good session',\r\n                  cost: {\r\n                    minor: 0,\r\n                    currencyCode: '£',\r\n                    Major: 30\r\n                  },\r\n                  timeZone: 'GMT',\r\n                  durationMins: 15,\r\n                  ID: '582621531',\r\n                  startAt: '12:30',\r\n                  status: 'Available'\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              GuruID: '803615196',\r\n              Date: '2021/01/10',\r\n              timeSlots: [\r\n                {\r\n                  notes: ' This is a very good session',\r\n                  cost: {\r\n                    minor: 0,\r\n                    currencyCode: '£',\r\n                    Major: 30\r\n                  },\r\n                  timeZone: 'GMT',\r\n                  durationMins: 15,\r\n                  ID: '890122959',\r\n                  startAt: '11:30',\r\n                  status: 'Available'\r\n                }\r\n              ]\r\n            }\r\n          ]);\r\n          setTimeout(()=>{\r\n              setLoading(false);\r\n              fillSlots();\r\n          },2000);\r\n        // fetch(`https://j6lw75i817.execute-api.us-east-2.amazonaws.com/v1/gurus/${id}/availability`).then(response=>{\r\n        //     if(response.ok){\r\n        //         return response.json();\r\n        //     }\r\n        // }).then(jsonResponse=>{\r\n        //     return jsonResponse;\r\n        // })\r\n        // .then(result=>{\r\n        //     setAvailability(result.body);\r\n        //     setLoading(false);\r\n        //     fillSlots();\r\n        // }).catch(error=>{\r\n        //     console.log(error);\r\n        // });\r\n    }\r\n    useEffect(()=>{\r\n        //setId(query.get(\"id\"));\r\n        fetchAvailability();\r\n    },[])\r\n    const addSlot = ()=>{\r\n      setUploading(true);\r\n      const timeSlot = {};\r\n      timeSlot.startAt = format(startTime,'HH:mm',{locale:enGB});\r\n      timeSlot.durationMins = duration\r\n      timeSlot.cost = {\r\n        currencyCode:\"£\",\r\n        major:Math.floor(cost),\r\n        minor:cost-Math.floor(cost)\r\n      };\r\n      timeSlot.status=\"available\";\r\n      timeSlot.timeZone = \"GMT\";\r\n      timeSlot.note = note;\r\n      const fetchOptions = {\r\n        method:\"POST\",\r\n        headers:{\r\n          \"Content-Type\":\"application/json\"\r\n        },\r\n        body:JSON.stringify({date:format(date, 'yyyy/MM/dd', { locale: enGB }),timeSlot:timeSlot})\r\n      }\r\n      fetch(`https://j6lw75i817.execute-api.us-east-2.amazonaws.com/v1/gurus/${id}/availability`,fetchOptions).then(response=>{\r\n        if(response.ok){\r\n          return response.json();\r\n        }\r\n        if(response.status===400&&response.message===\"booking already exists for this time, can not be added\"){\r\n            toast.current.show({severity: 'error', summary: 'Slot already exists', detail: 'Sorry please choose another slot',life:5000});\r\n            setLoading(false);\r\n        }\r\n      }).then(jsonResponse=>{\r\n        return jsonResponse;\r\n      }).then(res=>{\r\n        toast1.current.show({severity: 'success', summary: 'Success', detail: `The slot was added to ${format(date,\"yyyy/MM/dd\",{locale:enGB})}`});\r\n        setStartTime(new Date(\"Mon Jan 11 2021 8:30:01 GMT+0530 (India Standard Time)\"));\r\n        setDuration(15);\r\n        setCost(30);\r\n        setNote(\"\");\r\n        setLoading(false);\r\n      })\r\n    }\r\n    return (\r\n        <>\r\n            <Toast ref={toast} position=\"bottom-right\"></Toast>\r\n            <section className=\"section\">\r\n            <Container style={{ maxWidth: '80vw', margin: '0 auto' }}>\r\n                <Row style={{ display: 'flex', justifyContent: 'center' }}>\r\n                <Col md={5} sm={12} className=\"form-container\">\r\n                    <div\r\n                    style={{ border: '1px solid rgba(0,0,0,0.1)', width: '100%' }}\r\n                    >\r\n                        <DatePickerCalendar\r\n                            locale={enGB}\r\n                            date={date}\r\n                            onDateChange={(date)=>{\r\n                              fillSlots(date);\r\n                              setDate(date);\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    \r\n                </Col>\r\n                <Col md={6} sm={12} className=\"form-container\">\r\n                    <h4 className=\"mt-3\">{date?`Selected Date: ${format(date, 'yyyy/MM/dd', { locale: enGB })}`:\"No date selected\"}</h4>\r\n                    {date?\r\n                    <TabView activeIndex={activeIndex} onTabChange={(e)=>{\r\n                        if(e.index===1){\r\n                            fetchAvailability();\r\n                        }\r\n                        setActiveIndex(e.index);\r\n                    }}>\r\n                        <TabPanel header=\"Add a slot\">\r\n                            <FormGroup className=\"form-group-container\">\r\n                                <label htmlFor=\"startTime\">Start Time</label>\r\n                                <Calendar id=\"startTime\" value={startTime} onChange={(e) => {\r\n                                    console.log(e.value);\r\n                                    setStartTime(e.value)}}  timeOnly hourFormat=\"24\" stepMinute={30} className=\"w-75 ml-2\"/>\r\n                            </FormGroup>\r\n                            <FormGroup className=\"form-group-container\">\r\n                                {/* <label htmlFor=\"endTime\">End Time</label>\r\n                                <Calendar id=\"endTime\" value={endTime} onChange={(e) => setEndTime(e.value)} timeOnly hourFormat=\"24\" stepMinute={30}/> */}\r\n                                <label htmlFor=\"endTime\">Duration</label>\r\n                                <InputNumber id=\"horizontal\" value={duration} onValueChange={(e) => setDuration(e.value)} showButtons buttonLayout=\"horizontal\" step={15} suffix=\" minutes\"\r\n                                    decrementButtonClassName=\"p-button-danger\" incrementButtonClassName=\"p-button-success\" incrementButtonIcon=\"pi pi-plus\" decrementButtonIcon=\"pi pi-minus\" className=\"w-75 ml-3\"/>\r\n                            </FormGroup>\r\n                            <FormGroup className=\"form-group-container\">\r\n                                {/* <label htmlFor=\"endTime\">End Time</label>\r\n                                <Calendar id=\"endTime\" value={endTime} onChange={(e) => setEndTime(e.value)} timeOnly hourFormat=\"24\" stepMinute={30}/> */}\r\n                                <label htmlFor=\"endTime\">Cost</label>\r\n                                <InputNumber id=\"currency-us\" value={cost} onValueChange={(e) => {\r\n                                    console.log(e.value)\r\n                                    setCost(e.value)}} mode=\"currency\" currency=\"GBP\" locale=\"en-US\" className=\"w-75 ml-5\" />\r\n                            </FormGroup>\r\n                            <FormGroup className=\"form-group-container\">\r\n                                <Label>\r\n                                    Note\r\n                                </Label>\r\n                                <textarea\r\n                                    name=\"comments\"\r\n                                    id=\"comments\"\r\n                                    rows=\"2\"\r\n                                    className=\"form-control pl-3 w-75 ml-5\"\r\n                                    placeholder=\"Enter session note here\"\r\n                                    value={note}\r\n                                    onChange={(event)=>{\r\n                                        setNote(event.target.value);\r\n                                    }}\r\n                                ></textarea>\r\n                            </FormGroup>\r\n                            {uploading?\r\n                            <Spinner fill=\"black\"></Spinner>\r\n                            :\r\n                            <button className=\"book-btn\" onClick={addSlot}>\r\n                                  Add Slot\r\n                            </button>}\r\n                        </TabPanel>\r\n                        <TabPanel header=\"View Slots\">\r\n                            <div className=\"view-slot-container\">\r\n                                {loading?<Spinner color=\"#ff5001\" style={{margin:\"10px auto\"}}></Spinner>:\r\n                                <div\r\n                                style={{\r\n                                    display: 'flex',\r\n                                    justifyContent: 'center',\r\n                                    border: '1px solid rgba(0,0,0,0.1)'\r\n                                }}\r\n                                >\r\n                                    <ul className=\"timeSlotList mx-5\" id=\"morningList\"></ul>\r\n                                    <ul className=\"timeSlotList mx-5\" id=\"afternoonList\"></ul>\r\n                                    <ul className=\"timeSlotList mx-5\" id=\"eveningList\"></ul>\r\n                                </div>\r\n                                }\r\n                            </div>\r\n                            \r\n                        </TabPanel>\r\n                    </TabView>\r\n                    :\r\n                    null\r\n                    }\r\n                </Col>\r\n                </Row>\r\n            </Container>\r\n            </section>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddAvailability\r\n","C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\App.js",["85"],"/* eslint-disable react/no-array-index-key */\n/* eslint-disable max-classes-per-file */\n// import './App.scss';\nimport React, { Suspense } from 'react';\nimport {\n  Route,\n  Switch,\n  BrowserRouter as Router,\n  withRouter\n} from 'react-router-dom';\n\nimport Layout from './views/Layout/Layout';\nimport routes from './routes';\nimport './styles/helper.css';\nimport 'primeicons/primeicons.css';\nimport 'primereact/resources/primereact.css';\nimport 'primeflex/primeflex.css';\nimport 'primereact/resources/themes/saga-blue/theme.css';\nfunction withLayout(WrappedComponent) {\n  return class extends React.PureComponent {\n    render() {\n      return (\n        <Layout>\n          <WrappedComponent />\n        </Layout>\n      );\n    }\n  };\n}\n\nconst Loader = () => (\n  <div id=\"preloader\">\n    <div id=\"status\">\n      <div className=\"spinner\">\n        <div className=\"double-bounce1\" />\n        <div className=\"double-bounce2\" />\n      </div>\n    </div>\n  </div>\n);\n\nfunction App() {\n  return (\n    <>\n      <Router>\n        <Suspense fallback={Loader()}>\n          <Switch>\n            {routes.map((route, idx) =>\n              route.isWithoutLayout ? (\n                <Route\n                  path={route.path}\n                  exact={route.exact}\n                  component={route.component}\n                  key={idx}\n                />\n              ) : (\n                <Route\n                  path={route.path}\n                  exact\n                  component={withLayout(route.component)}\n                  key={idx}\n                />\n              )\n            )}\n          </Switch>\n        </Suspense>\n      </Router>\n    </>\n  );\n}\nexport default App;\n","C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\index.js",[],"C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\addCategory\\addCategory.js",["86"],"import React,{useEffect, useState, useRef} from 'react'\r\nimport {ListBox} from \"primereact/listbox\";\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { Button } from \"primereact/button\";\r\nimport Banner from '../Layout/Banner/Banner';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Container,Row,Col,Spinner} from 'reactstrap';\r\nimport \"./style.css\";\r\nfunction AddCategory() {\r\n    const toast = useRef(null);\r\n    const toast1 = useRef(null);\r\n    const [categories,setCategories] = useState([]);\r\n    const [loading,setLoading] = useState(true);\r\n    const [fetching,setFetching] = useState(false);\r\n    const [inProgress,setInProgress] = useState(false);\r\n    const [name,setName] = useState(\"\");\r\n    const showSuccess = () => {\r\n        toast.current.show({severity:'success', summary: 'Category added', detail:`${name} has been added`, life: 3000});\r\n    }\r\n    const showError = () => {\r\n        toast1.current.show({severity:'error', summary: 'Failed to add', detail:'Please try again with a different name', life: 3000});\r\n    }\r\n    const fetchCategories = ()=>{\r\n        if(!loading){\r\n            setFetching(true);\r\n        }\r\n        fetch(`https://6w9erowpnj.execute-api.us-east-2.amazonaws.com/v1/categories`).then(response=>{\r\n                if(response.ok){\r\n                    return response.json();\r\n                }\r\n            }).then(jsonResponse=>{\r\n                return jsonResponse;\r\n            })\r\n            .then(result=>{\r\n                setCategories(result.body);\r\n                if(loading){\r\n                    setLoading(false);\r\n                }\r\n                setFetching(false);\r\n            }).catch(error=>{\r\n                console.log(error);\r\n            });\r\n    }\r\n    useEffect(()=>{\r\n        fetchCategories();\r\n    },[]);\r\n    const itemTemplate = (option) => {\r\n        return (\r\n            <h5 id={option.ID}>{option.name}</h5>\r\n        );\r\n    }\r\n    const handleAdd = ()=>{\r\n        setInProgress(true);\r\n        const fetchOptions = {\r\n            method:\"POST\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\"\r\n            },\r\n            body: JSON.stringify({name:name})\r\n        }\r\n        fetch(`https://6w9erowpnj.execute-api.us-east-2.amazonaws.com/v1/categories`,fetchOptions).then(response=>{\r\n            if(response.statusCode===200){\r\n                return response.json();\r\n            }\r\n            else{\r\n                showError();\r\n            }\r\n        }).then(jsonResponse=>{\r\n            return jsonResponse;\r\n        }).then(()=>{\r\n            setInProgress(false);\r\n            showSuccess();\r\n            setName(\"\");\r\n            fetchCategories();\r\n        })\r\n    }\r\n    return (\r\n        <div>\r\n            <Toast ref={toast} position=\"bottom-right\" />\r\n            <Toast ref={toast1} position=\"bottom-right\" />\r\n            {loading?\r\n                <div className=\"loader-container\">\r\n                    <div id=\"preloader\">\r\n                        <div id=\"status\">\r\n                        <div className=\"spinner\">\r\n                            <div className=\"double-bounce1\" />\r\n                            <div className=\"double-bounce2\" />\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                :\r\n                <>\r\n                    <Banner title=\"Add Category\"/>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col md={6} className=\"left-container\">\r\n                            {fetching?\r\n                            <>\r\n                                <Spinner color=\"primary\"/>\r\n                            </>\r\n                            :\r\n                            <>\r\n                                <h3 className=\"left-heading\">Categories</h3>\r\n                                <ListBox options={categories} filter optionLabel=\"name\"\r\n                                    itemTemplate={itemTemplate} className=\"category-list\" />\r\n                            </>}\r\n                            </Col>\r\n                            <Col md={6} className=\"right-container\">\r\n                            <h4 className=\"left-heading\">Add new Category</h4>\r\n                            <div className=\"p-inputgroup\">\r\n                                <InputText placeholder=\"Enter Name\" id=\"filter-name\" onChange={(event)=>{\r\n                                    setName(event.target.value);\r\n                                }} value={name}/>\r\n                                {inProgress?<Spinner color=\"primary\"/>:<Button label=\"Add\" onClick={handleAdd}/>}\r\n                            </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddCategory\r\n\r\n","C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\viewAllGurus\\viewAllGurus.js",[],"C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\addNewGuru\\addNewGuru.js",["87","88","89"],"import React, { useEffect, useState, useRef } from 'react'\r\nimport {\r\n    Col,\r\n    Container,\r\n    Form,\r\n    FormGroup,\r\n    Row,\r\n    Spinner,\r\n    Label,\r\n    Input\r\n} from 'reactstrap';\r\nimport { Toast } from 'primereact/toast';\r\nimport FeatherIcon from 'feather-icons-react';\r\nimport { MultiSelect } from 'primereact/multiselect';\r\nimport \"./style.css\"\r\nimport Banner from '../Layout/Banner/Banner';\r\nfunction AddNewGuru() {\r\n    const toast = useRef(null);\r\n    const toast1 = useRef(null);\r\n    const toast2 = useRef(null);\r\n    const toast3 = useRef(null);\r\n    const toast4 = useRef(null);\r\n    const [name,setName] = useState({firstName:\"\",lastName:\"\"});\r\n    const [email,setEmail] = useState(\"\");\r\n    const [bio,setBio] = useState(\"\");\r\n    const [profileString,setProfileString] = useState(\"\");\r\n    const [thumbnailString,setThumbnailString] = useState(\"\");\r\n    const [videoString,setVideoString] = useState(\"\");\r\n    const [keywords,setKeywords] = useState([]);\r\n    const [categories,setCategories] = useState([]);\r\n    const [filters,setFilters] = useState([]);\r\n    const [selectedCategory,setSelectedCategory] = useState(null);\r\n    const [selectedFilter,setSelectedFilter] = useState(null);\r\n    const [selectedKeyword,setSelectedKeyword] = useState(null);\r\n    const [links,setLinks] = useState({\r\n        profile:\"\",\r\n        thumbnail:\"\",\r\n        video:\"\",\r\n    })\r\n    const [profilePreview,setProfilePreview] = useState({\r\n        image:null,\r\n        name:null,\r\n        size:null,\r\n    });\r\n    const [thumbnailPreview,setThumbnailPreview] = useState({\r\n        image:null,\r\n        name:null,\r\n        size:null,\r\n    });\r\n    const [videoPreview,setVideoPreview] = useState({\r\n        image:null,\r\n        name:null,\r\n        size:null,\r\n    });\r\n    const [loading,setLoading] = useState({keyword:true,filter:true,category:true});\r\n    const [uploading,setUploading] = useState({profile:false,thumbnail:false,video:false,whole:false});\r\n    const fetchFilters = ()=>{\r\n        fetch(`https://1qpe25db41.execute-api.us-east-2.amazonaws.com/v1/filter`).then(response=>{\r\n                if(response.ok){\r\n                    return response.json();\r\n                }\r\n            }).then(jsonResponse=>{\r\n                return jsonResponse;\r\n            })\r\n            .then(result=>{\r\n                setFilters(result.body);\r\n                setLoading((prev)=>{\r\n                    return {...prev,filter:false}\r\n                });\r\n            }).catch(error=>{\r\n                console.log(error);\r\n            });\r\n    }\r\n    const fetchCategories = ()=>{\r\n        fetch(`https://6w9erowpnj.execute-api.us-east-2.amazonaws.com/v1/categories`).then(response=>{\r\n                if(response.ok){\r\n                    return response.json();\r\n                }\r\n            }).then(jsonResponse=>{\r\n                return jsonResponse;\r\n            })\r\n            .then(result=>{\r\n                setCategories(result.body);\r\n                setLoading((prev)=>{\r\n                    return {...prev,category:false}\r\n                });\r\n            }).catch(error=>{\r\n                console.log(error);\r\n            });\r\n    }\r\n    const fetchKeywords = ()=>{\r\n        fetch(`https://la6s3169jc.execute-api.us-east-2.amazonaws.com/v1/skillset`).then(response=>{\r\n                if(response.ok){\r\n                    return response.json();\r\n                }\r\n            }).then(jsonResponse=>{\r\n                return jsonResponse;\r\n            })\r\n            .then(result=>{\r\n                setKeywords(result.body);\r\n                setLoading((prev)=>{\r\n                    return {...prev,keyword:false}\r\n                });\r\n            }).catch(error=>{\r\n                console.log(error);\r\n            });\r\n    }\r\n    const onUploadComplete = (type) => {\r\n        if(type===1){\r\n            toast.current.show({severity: 'success', summary: 'Success', detail: 'The profile picture was uploaded'});\r\n        }\r\n        else if(type===2){\r\n            toast1.current.show({severity: 'success', summary: 'Success', detail: 'The intro video thumbnail was uploaded'});\r\n        }\r\n        else if(type===3){\r\n            toast2.current.show({severity: 'success', summary: 'Success', detail: 'The intro video was uploaded'});\r\n        }\r\n        else if(type===4){\r\n            toast4.current.show({severity: 'success', summary: 'Success', detail: `${name.firstName} ${name.lastName} was added successfully`});\r\n        }\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        fetchCategories();\r\n        fetchFilters();\r\n        fetchKeywords();\r\n    },[])\r\n    const checkValidations = () =>{\r\n        if(name.firstName!==\"\"&&name.lastName!==\"\"&&email!==\"\"&&bio!==\"\" && selectedCategory &&selectedCategory.length>0&&selectedFilter&&selectedFilter.length>0&&selectedKeyword&&selectedKeyword.length>0&&links.profile!==\"\"&&links.thumbnail!==\"\"&&links.video!==\"\"){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    const itemTemplate = (option) => {\r\n        if (option) {\r\n            return (\r\n                <div className=\"item-container\">\r\n                    <div id={option.ID}>{option.name}</div>\r\n                </div>\r\n            );\r\n        }\r\n        return \"Choose a value\";\r\n    }\r\n    const uploadHandlerProfile = (event)=>{\r\n        setUploading((prev)=>{\r\n            return {...prev,profile:true}\r\n        })\r\n        const guruName=name.firstName+\" \"+name.lastName;\r\n        const fetchOptions = {\r\n            method: \"POST\",\r\n            body: JSON.stringify({guruName:guruName,type:\"profile\",timeStamp:~~(+new Date() / 1000)}),\r\n        };\r\n        fetch(\"https://5hsr4euhfe.execute-api.us-east-2.amazonaws.com/dev/uploadProfile\",fetchOptions).then(response=>{\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        })\r\n        .then(jsonResponse=>{\r\n            return jsonResponse;\r\n        })\r\n        .then(async (resObj)=>{\r\n            let binary = atob(profileString.split(\",\")[1])\r\n            let blobArray=[];\r\n            for(let i=0;i<binary.length;i++){\r\n                blobArray.push(binary.charCodeAt(i))\r\n            }\r\n            let blobData = new Blob([new Uint8Array(blobArray)],{type:'image/jpeg'});\r\n            const result = await fetch(resObj.uploadURL,{method:\"PUT\",body:blobData});\r\n            setUploading((prev)=>{\r\n                return {...prev,profile:false}\r\n            })\r\n            setLinks((prev)=>{\r\n                return {...prev,profile:resObj.uploadURL.split(\"?\")[0]}\r\n            })\r\n            onUploadComplete(1);\r\n        \r\n        }).catch(err=>{\r\n            console.log(err);\r\n        });\r\n    }\r\n    const uploadHandlerThumbnail = (event)=>{\r\n        setUploading((prev)=>{\r\n            return {...prev,thumbnail:true}\r\n        })\r\n        const guruName=name.firstName+\" \"+name.lastName;\r\n        const fetchOptions = {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\tbody: JSON.stringify({guruName:guruName,type:\"thumbnail\",timeStamp:~~(+new Date() / 1000)}),\r\n\t\t};\r\n        fetch(\"https://5hsr4euhfe.execute-api.us-east-2.amazonaws.com/dev/uploadProfile\",fetchOptions).then(response=>{\r\n            if(response.ok){\r\n            return response.json();\r\n            }\r\n        })\r\n        .then(jsonResponse=>{\r\n            return jsonResponse;\r\n        })\r\n        .then(async (resObj)=>{\r\n            let binary = atob(thumbnailString.split(\",\")[1])\r\n            let blobArray=[];\r\n            for(let i=0;i<binary.length;i++){\r\n                blobArray.push(binary.charCodeAt(i))\r\n            }\r\n            let blobData = new Blob([new Uint8Array(blobArray)],{type:'image/jpeg'});\r\n            const result = await fetch(resObj.uploadURL,{method:\"PUT\",body:blobData});\r\n            setUploading((prev)=>{\r\n                return {...prev,thumbnail:false}\r\n            })\r\n            setLinks((prev)=>{\r\n                return {...prev,thumbnail:resObj.uploadURL.split(\"?\")[0]}\r\n            })\r\n            onUploadComplete(2);\r\n        \r\n        }).catch(err=>{\r\n            console.log(err);\r\n        });\r\n    }\r\n    const uploadHandlerVideo = (event)=>{\r\n        setUploading((prev)=>{\r\n            return {...prev,video:true}\r\n        })\r\n        const videoID = parseInt(Math.random() * 10000000);\r\n        const guruName=name.firstName+\" \"+name.lastName;\r\n        const fetchOptions = {\r\n            method: \"POST\",\r\n            body: JSON.stringify({guruName:guruName,videoID:videoID,type:\"intro\",timeStamp:~~(+new Date() / 1000)}),\r\n        };\r\n        fetch(\"https://5hsr4euhfe.execute-api.us-east-2.amazonaws.com/dev/uploadVideo\",fetchOptions).then(response=>{\r\n        if(response.ok){\r\n            return response.json();\r\n        }\r\n        })\r\n        .then(jsonResponse=>{\r\n            return jsonResponse;\r\n        })\r\n        .then(async (resObj)=>{\r\n            let binary = atob(videoString.split(\",\")[1])\r\n            let blobArray=[];\r\n            for(let i=0;i<binary.length;i++){\r\n                blobArray.push(binary.charCodeAt(i))\r\n            }\r\n            let blobData = new Blob([new Uint8Array(blobArray)],{type:'video/mp4'});\r\n            const result = await fetch(resObj.uploadURL,{method:\"PUT\",body:blobData});\r\n            setUploading((prev)=>{\r\n                return {...prev,video:false}\r\n            })\r\n            setLinks((prev)=>{\r\n                return {...prev,video:resObj.uploadURL.split(\"?\")[0]}\r\n            })\r\n            onUploadComplete(3);\r\n            \r\n        }).catch(err=>{\r\n            console.log(err);\r\n        });\r\n    }\r\n    const handleChangeProfile = (event) =>{\r\n        const file = document.getElementById(\"guru-profile\").files[0];\r\n        if(file){\r\n            let reader = new FileReader();\r\n            reader.onload = (e)=>{\r\n                if (!e.target.result.includes('data:image/jpeg')) {\r\n                    alert('Wrong file type - JPEG only.')\r\n                }\r\n                else{\r\n                    setProfilePreview((prev)=>{\r\n                        return {image:URL.createObjectURL(event.target.files[0]),name:event.target.files[0].name,size:Math.round(event.target.files[0].size/1024)}\r\n                    })\r\n                    setProfileString(e.target.result);\r\n                }\r\n            } \r\n            reader.readAsDataURL(file);\r\n        }\r\n    }\r\n    const handleChangeThumbnail = (event) =>{\r\n        const file = document.getElementById(\"guru-intro-thumbnail\").files[0];\r\n        if(file){\r\n            let reader = new FileReader();\r\n            reader.onload = (e)=>{\r\n                if (!e.target.result.includes('data:image/jpeg')) {\r\n                    alert('Wrong file type - JPEG only.')\r\n                }\r\n                else{\r\n                    setThumbnailPreview((prev)=>{\r\n                        return {image:URL.createObjectURL(event.target.files[0]),name:event.target.files[0].name,size:Math.round(event.target.files[0].size/1024)}\r\n                    })\r\n                    setThumbnailString(e.target.result);\r\n                }\r\n            } \r\n            reader.readAsDataURL(file);\r\n        }\r\n    }\r\n    const handleChangeVideo = (event) =>{\r\n        const file = document.getElementById(\"guru-intro-video\").files[0];\r\n        if(file){\r\n            let reader = new FileReader();\r\n            reader.onload = (e)=>{\r\n                if (!e.target.result.includes('data:video/mp4')) {\r\n                    alert('Wrong file type - MP4 only.')\r\n                }\r\n                else{\r\n                    setVideoPreview((prev)=>{\r\n                        return {image:URL.createObjectURL(event.target.files[0]),name:event.target.files[0].name,size:Math.round(event.target.files[0].size/1024)}\r\n                    })\r\n                    setVideoString(e.target.result);\r\n                }\r\n            } \r\n            reader.readAsDataURL(file);\r\n        }\r\n    }\r\n    const handleAdd = (event)=>{\r\n        event.preventDefault();\r\n        const valid = checkValidations();\r\n        if(!valid){\r\n            toast3.current.show({severity: 'error', summary: 'All fields are mandatory', detail: 'Please check that all fields are completely filled'});\r\n        }\r\n        else{\r\n            setUploading((prev)=>{\r\n                return {...prev,whole:true}\r\n            })\r\n            let guruObj = {\r\n                profilePhoto:links.profile,\r\n                techniqueVideos:{\r\n                    videoID:1,\r\n                    videoList:[],\r\n                },\r\n                introVideo:{\r\n                    photo:links.thumbnail,\r\n                    video:links.video\r\n                },\r\n                bio:bio,\r\n                firstName:name.firstName,\r\n                lastName:name.lastName,\r\n                email:email,\r\n                addedBy:{\r\n                    id:'manual_entry_by_saatvik',\r\n                    name:{\r\n                        firstName:\"Saatvik\",\r\n                        secondName:\"Bhatnagar\"\r\n                    }\r\n                },\r\n                categories:selectedCategory,\r\n                filters: selectedFilter,\r\n                keywords:selectedKeyword,\r\n            }\r\n            console.log(guruObj);\r\n            const fetchOptions = {\r\n                method: \"POST\",\r\n                headers:{\r\n                    \"Content-Type\":\"application/json\"\r\n                },\r\n                body: JSON.stringify(guruObj),\r\n            }\r\n            fetch(\"https://j6lw75i817.execute-api.us-east-2.amazonaws.com/v1/gurus\",fetchOptions).then(response=>{\r\n                if(response.ok){\r\n                    return response.json();\r\n                }\r\n            })\r\n            .then(jsonResponse=>{\r\n                return jsonResponse;\r\n            })\r\n            .then(resObj=>{\r\n                onUploadComplete(4);\r\n                setName({firstName:\"\",lastName:\"\"});\r\n                setEmail(\"\");\r\n                setBio(\"\");\r\n                setSelectedCategory(null);\r\n                setSelectedFilter(null);\r\n                setSelectedKeyword(null);\r\n                setProfilePreview({\r\n                    image:null,\r\n                    name:null,\r\n                    size:null,\r\n                });\r\n                setThumbnailPreview({\r\n                    image:null,\r\n                    name:null,\r\n                    size:null,\r\n                });\r\n                setVideoPreview({\r\n                    image:null,\r\n                    name:null,\r\n                    size:null,\r\n                });\r\n                setLinks({\r\n                    profile:\"\",\r\n                    thumbnail:\"\",\r\n                    video:\"\",\r\n                })\r\n                document.getElementById(\"guru-profile\").value=\"\";\r\n                document.getElementById(\"guru-intro-video\").value=\"\";\r\n                document.getElementById(\"guru-intro-thumbnail\").value=\"\";\r\n                setUploading((prev)=>{\r\n                    return {...prev,whole:false}\r\n                })\r\n            })\r\n        }\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            <Toast ref={toast} position=\"bottom-right\"></Toast>\r\n            <Toast ref={toast1} position=\"bottom-right\"></Toast>\r\n            <Toast ref={toast2} position=\"bottom-right\"></Toast>\r\n            <Toast ref={toast3} position=\"bottom-right\"></Toast>\r\n            <Toast ref={toast4} position=\"bottom-right\"></Toast>\r\n            {!loading.category && !loading.filter && !loading.keyword ? \r\n            <>\r\n                <Banner title=\"Add New Guru\"/>\r\n                <Container>\r\n                    <Row className=\"justify-content-center\">\r\n                    <Col lg={10} xs={12}>\r\n                        <div className=\"rounded p-4 shadow\">\r\n                        <Row>\r\n                            <Col xs={12}>\r\n                            <Form>\r\n                                <Row>\r\n                                <Col md={6}>\r\n                                    <FormGroup>\r\n                                    <Label>\r\n                                        Guru Name <span className=\"text-danger\">*</span>\r\n                                    </Label>\r\n                                    <div className=\"position-relative\">\r\n                                        <i>\r\n                                        <FeatherIcon\r\n                                            icon=\"user\"\r\n                                            className=\"fea icon-sm icons\"\r\n                                        />\r\n                                        </i>\r\n                                    </div>\r\n                                    <Input\r\n                                        name=\"name\"\r\n                                        id=\"name\"\r\n                                        type=\"text\"\r\n                                        className=\"form-control pl-5\"\r\n                                        placeholder=\"First Name :\"\r\n                                        value={name.firstName}\r\n                                        onChange={(event)=>{\r\n                                            setName((prev)=>{\r\n                                                return {...prev,firstName:event.target.value}\r\n                                            })\r\n                                        }}\r\n                                    />\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                <Col md={6}>\r\n                                    <FormGroup>\r\n                                    <Label></Label>\r\n                                    <Input\r\n                                        name=\"lastName\"\r\n                                        id=\"lastName\"\r\n                                        type=\"text\"\r\n                                        className=\"form-control pl-3 mt-2\"\r\n                                        placeholder=\"Last Name :\"\r\n                                        value={name.lastName}\r\n                                        onChange={(event)=>{\r\n                                            setName((prev)=>{\r\n                                                return {...prev,lastName:event.target.value}\r\n                                            })\r\n                                        }}\r\n                                    />\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                <Col md={12}>\r\n                                    <FormGroup>\r\n                                    <Label>\r\n                                        Email{' '}\r\n                                        <span className=\"text-danger\">*</span>\r\n                                    </Label>\r\n                                    <div className=\"position-relative\">\r\n                                        <i>\r\n                                        <FeatherIcon\r\n                                            icon=\"mail\"\r\n                                            className=\"fea icon-sm icons\"\r\n                                        />\r\n                                        </i>\r\n                                    </div>\r\n                                    <Input\r\n                                        name=\"email\"\r\n                                        id=\"email\"\r\n                                        type=\"email\"\r\n                                        className=\"form-control pl-5\"\r\n                                        placeholder=\"Your email :\"\r\n                                        value={email}\r\n                                        onChange={(event)=>{\r\n                                            setEmail(event.target.value)\r\n                                        }}\r\n                                    />\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                <Col md={12}>\r\n                                    <FormGroup>\r\n                                    <Label>\r\n                                        Bio <span className=\"text-danger\">*</span>{' '}\r\n                                    </Label>\r\n                                    <div className=\"position-relative\">\r\n                                        <i>\r\n                                        <FeatherIcon\r\n                                            icon=\"info\"\r\n                                            className=\"fea icon-sm icons\"\r\n                                        />\r\n                                        </i>\r\n                                    </div>\r\n                                    <textarea\r\n                                        name=\"comments\"\r\n                                        id=\"comments\"\r\n                                        rows=\"4\"\r\n                                        className=\"form-control bio-textarea pl-5\"\r\n                                        value={bio}\r\n                                        onChange={(event)=>{\r\n                                            setBio(event.target.value);\r\n                                        }}\r\n                                    ></textarea>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col md={12}>\r\n                                        <FormGroup className=\"multiselect-container\">\r\n                                            <Label>\r\n                                                Select Categories<span className=\"text-danger\">*</span>{' '}\r\n                                            </Label>\r\n                                            <MultiSelect value={selectedCategory} options={categories}  onChange={(e) => setSelectedCategory(e.value)} optionLabel=\"name\" placeholder=\"\" filter className=\"multiselect-custom\" itemTemplate={itemTemplate} selectedItemTemplate={itemTemplate} />\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col md={12}>\r\n                                        <FormGroup className=\"multiselect-container\">\r\n                                            <Label>\r\n                                                Select Filters<span className=\"text-danger\">*</span>{' '}\r\n                                            </Label>\r\n                                            <MultiSelect value={selectedFilter} options={filters}  onChange={(e) => {\r\n                                                setSelectedFilter(e.value)}} optionLabel=\"name\" placeholder=\"\" filter className=\"multiselect-custom\" itemTemplate={itemTemplate} selectedItemTemplate={itemTemplate} />\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col md={12}>\r\n                                        <FormGroup className=\"multiselect-container\">\r\n                                            <Label>\r\n                                                Select Keywords<span className=\"text-danger\">*</span>{' '}\r\n                                            </Label>\r\n                                            <MultiSelect value={selectedKeyword} options={keywords}  onChange={(e) => {\r\n                                                setSelectedKeyword(e.value)}} optionLabel=\"name\" placeholder=\"\" filter className=\"multiselect-custom\" itemTemplate={itemTemplate} selectedItemTemplate={itemTemplate} />\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col md={12}>\r\n                                        <FormGroup className=\"upload-container\">\r\n                                            <Label>\r\n                                                Profile Photo<span className=\"text-danger\">*</span>{' '}\r\n                                            </Label>\r\n                                            <input id=\"guru-profile\" onChange={handleChangeProfile} type=\"file\"/>\r\n                                            <div className=\"preview-container\">\r\n                                                {!profilePreview.image?<h5>Select a file to upload</h5>:\r\n                                                <div className=\"preview-bar\">\r\n                                                    <img src={profilePreview.image} className=\"preview-img\" alt=\"preview\"/>\r\n                                                    <h6>{profilePreview.name}</h6>\r\n                                                    <h6>{`${profilePreview.size} kb`}</h6>\r\n                                                    <button onClick={()=>{\r\n                                                        document.getElementById(\"guru-profile\").value=\"\";\r\n                                                        setProfilePreview({name:null,image:null,size:null});\r\n                                                    }}>\r\n                                                        <FeatherIcon icon=\"x-square\"/>\r\n                                                    </button>\r\n                                                </div>\r\n                                                \r\n                                                }\r\n                                                <div className=\"upload-btn-container\">\r\n                                                    {uploading.profile?<Spinner color=\"black\" className=\"mt-2 ml-3\"/>:<button className=\"upload-btn mt-2\" onClick={uploadHandlerProfile}><FeatherIcon icon=\"upload\"/></button>}\r\n                                                </div>\r\n                                            </div>\r\n                                            \r\n                                            \r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col md={12}>\r\n                                        <FormGroup className=\"upload-container\">\r\n                                            <Label>\r\n                                                Intro Video Thumbnail<span className=\"text-danger\">*</span>{' '}\r\n                                            </Label>\r\n                                            <input id=\"guru-intro-thumbnail\" onChange={handleChangeThumbnail} type=\"file\"/>\r\n                                            <div className=\"preview-container\">\r\n                                                {!thumbnailPreview.image?<h5>Select a file to upload</h5>:\r\n                                                <div className=\"preview-bar\">\r\n                                                    <img src={thumbnailPreview.image} className=\"preview-img\" alt=\"preview\"/>\r\n                                                    <h6>{thumbnailPreview.name}</h6>\r\n                                                    <h6>{`${thumbnailPreview.size} kb`}</h6>\r\n                                                    <button onClick={()=>{\r\n                                                        document.getElementById(\"guru-intro-thumbnail\").value=\"\";\r\n                                                        setThumbnailPreview({name:null,image:null,size:null});\r\n                                                    }}>\r\n                                                        <FeatherIcon icon=\"x-square\"/>\r\n                                                    </button>\r\n                                                </div>\r\n                                                \r\n                                                }\r\n                                                <div className=\"upload-btn-container\">\r\n                                                    {uploading.thumbnail?<Spinner color=\"black\" className=\"mt-2 ml-3\"/>:<button className=\"upload-btn mt-2\" onClick={uploadHandlerThumbnail}><FeatherIcon icon=\"upload\"/></button>}\r\n                                                </div>\r\n                                            </div>\r\n                                            \r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col md={12}>\r\n                                        <FormGroup className=\"upload-container\">\r\n                                            <Label>\r\n                                                Intro Video<span className=\"text-danger\">*</span>{' '}\r\n                                            </Label>\r\n                                            <input id=\"guru-intro-video\" onChange={handleChangeVideo} type=\"file\"/>\r\n                                            <div className=\"preview-video-container\">\r\n                                                {!videoPreview.image?<h5>Select a file to upload</h5>:\r\n                                                <div className=\"preview-bar\">\r\n                                                    <video src={videoPreview.image} className=\"preview-video\" controls/>\r\n                                                    <h6>{videoPreview.name}</h6>\r\n                                                    <h6>{`${videoPreview.size} kb`}</h6>\r\n                                                    <button onClick={()=>{\r\n                                                        document.getElementById(\"guru-intro-video\").value=\"\";\r\n                                                        setVideoPreview({name:null,image:null,size:null});\r\n                                                    }}>\r\n                                                        <FeatherIcon icon=\"x-square\"/>\r\n                                                    </button>\r\n                                                </div>\r\n                                                \r\n                                                }\r\n                                                <div className=\"upload-btn-container\">\r\n                                                    {uploading.video?<Spinner color=\"black\" className=\"mt-2 ml-3\"/>:<button className=\"upload-btn mt-2\" onClick={uploadHandlerVideo}><FeatherIcon icon=\"upload\"/></button>}\r\n                                                </div>\r\n                                            </div>\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                <Col sm={12}>\r\n                                    {uploading.whole?\r\n                                        <Spinner color=\"#ff5001\"></Spinner>\r\n                                        :\r\n                                        <input\r\n                                        type=\"submit\"\r\n                                        id=\"submit\"\r\n                                        name=\"send\"\r\n                                        className=\"touch-btn\"\r\n                                        value=\"Add\"\r\n                                        onClick={handleAdd}\r\n                                        />\r\n                                    }\r\n                                </Col>\r\n                                </Row>\r\n                            </Form>\r\n                            </Col>\r\n                        </Row>\r\n                        </div>\r\n                    </Col>\r\n                    </Row>\r\n                </Container>\r\n            </>\r\n            :\r\n            <div className=\"loader-container\">\r\n                <div id=\"preloader\">\r\n                    <div id=\"status\">\r\n                    <div className=\"spinner\">\r\n                        <div className=\"double-bounce1\" />\r\n                        <div className=\"double-bounce2\" />\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddNewGuru\r\n","C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\addNewVideo\\addNewVideo.js",["90","91","92","93","94","95"],"C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\addFilter\\addFilter.js",["96","97"],"import React,{useEffect, useRef, useState} from 'react'\r\nimport {ListBox} from \"primereact/listbox\";\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { Button } from \"primereact/button\";\r\nimport Banner from '../Layout/Banner/Banner';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Container,Row,Col,Spinner,Alert } from 'reactstrap';\r\nimport \"./style.css\";\r\nfunction AddFilter() {\r\n    const toast = useRef(null);\r\n    const toast1 = useRef(null);\r\n    const [filter,setFilters] = useState([]);\r\n    const [loading,setLoading] = useState(true);\r\n    const [fetching,setFetching] = useState(false);\r\n    const [inProgress,setInProgress] = useState(false);\r\n    const [name,setName] = useState(\"\");\r\n    const showSuccess = () => {\r\n        toast.current.show({severity:'success', summary: 'Category added', detail:`${name} has been added`, life: 3000});\r\n    }\r\n    const showError = () => {\r\n        toast1.current.show({severity:'error', summary: 'Failed to add', detail:'Please try again with a different name', life: 3000});\r\n    }\r\n    const fetchFilters = ()=>{\r\n        if(!loading){\r\n            setFetching(true);\r\n        }\r\n        fetch(`https://1qpe25db41.execute-api.us-east-2.amazonaws.com/v1/filter`).then(response=>{\r\n                if(response.ok){\r\n                    return response.json();\r\n                }\r\n            }).then(jsonResponse=>{\r\n                return jsonResponse;\r\n            })\r\n            .then(result=>{\r\n                setFilters(result.body);\r\n                if(loading){\r\n                    setLoading(false);\r\n                }\r\n                setFetching(false);\r\n            }).catch(error=>{\r\n                console.log(error);\r\n            });\r\n    }\r\n    useEffect(()=>{\r\n        fetchFilters();\r\n    },[]);\r\n    const itemTemplate = (option) => {\r\n        return (\r\n            <h5 id={option.ID}>{option.name}</h5>\r\n        );\r\n    }\r\n    const handleAdd = ()=>{\r\n        setInProgress(true);\r\n        const fetchOptions = {\r\n            method:\"POST\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\"\r\n            },\r\n            body: JSON.stringify({name:name})\r\n        }\r\n        fetch(`https://1qpe25db41.execute-api.us-east-2.amazonaws.com/v1/filter`,fetchOptions).then(response=>{\r\n            if(response.statusCode===200){\r\n                return response.json();\r\n            }\r\n            else{\r\n                showError();\r\n            }\r\n        }).then(jsonResponse=>{\r\n            return jsonResponse;\r\n        }).then(()=>{\r\n            setInProgress(false);\r\n            showSuccess();\r\n            setName(\"\");\r\n            fetchFilters();\r\n        })\r\n    }\r\n    return (\r\n        <div>\r\n            <Toast ref={toast} position=\"bottom-right\" />\r\n            <Toast ref={toast1} position=\"bottom-right\" />\r\n            {loading?\r\n                <div className=\"loader-container\">\r\n                    <div id=\"preloader\">\r\n                        <div id=\"status\">\r\n                        <div className=\"spinner\">\r\n                            <div className=\"double-bounce1\" />\r\n                            <div className=\"double-bounce2\" />\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                :\r\n                <>\r\n                    <Banner title=\"Add EA Filter\"/>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col md={6} className=\"left-container\">\r\n                            {fetching?\r\n                            <>\r\n                                <Spinner color=\"primary\"/>\r\n                            </>\r\n                            :\r\n                            <>\r\n                                <h3 className=\"left-heading\">Filters</h3>\r\n                                <ListBox options={filter} filter optionLabel=\"name\"\r\n                                    itemTemplate={itemTemplate} className=\"category-list\" />\r\n                            </>}\r\n                            \r\n                            </Col>\r\n                            <Col md={6} className=\"right-container\">\r\n                            <h4 className=\"left-heading\">Add new EA filter</h4>\r\n                            <div className=\"p-inputgroup\">\r\n                                <InputText placeholder=\"Enter Name\" id=\"filter-name\" onChange={(event)=>{\r\n                                    setName(event.target.value);\r\n                                }} value={name}/>\r\n                                {inProgress?<Spinner color=\"primary\"/>:<Button label=\"Add\" onClick={handleAdd}/>}\r\n                            </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddFilter\r\n","C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\routes.js",[],"C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\Layout\\Layout.jsx",[],"C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\Layout\\TopNavBar\\TopNavBar.jsx",[],"C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\Layout\\Banner\\Banner.js",[],{"ruleId":"98","severity":1,"message":"99","line":7,"column":36,"nodeType":"100","messageId":"101","endLine":7,"endColumn":41},{"ruleId":"102","severity":1,"message":"103","line":46,"column":7,"nodeType":"104","endLine":46,"endColumn":9,"suggestions":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"102","severity":1,"message":"110","line":167,"column":7,"nodeType":"104","endLine":167,"endColumn":9,"suggestions":"111"},{"ruleId":"98","severity":1,"message":"112","line":202,"column":19,"nodeType":"100","messageId":"101","endLine":202,"endColumn":25},{"ruleId":"98","severity":1,"message":"112","line":239,"column":19,"nodeType":"100","messageId":"101","endLine":239,"endColumn":25},{"ruleId":"98","severity":1,"message":"112","line":277,"column":19,"nodeType":"100","messageId":"101","endLine":277,"endColumn":25},{"ruleId":"98","severity":1,"message":"113","line":14,"column":11,"nodeType":"100","messageId":"101","endLine":14,"endColumn":16},{"ruleId":"98","severity":1,"message":"114","line":21,"column":15,"nodeType":"100","messageId":"101","endLine":21,"endColumn":20},{"ruleId":"102","severity":1,"message":"115","line":245,"column":7,"nodeType":"104","endLine":245,"endColumn":9,"suggestions":"116"},{"ruleId":"98","severity":1,"message":"117","line":9,"column":3,"nodeType":"100","messageId":"101","endLine":9,"endColumn":13},{"ruleId":"102","severity":1,"message":"103","line":46,"column":7,"nodeType":"104","endLine":46,"endColumn":9,"suggestions":"118"},{"ruleId":"98","severity":1,"message":"112","line":168,"column":19,"nodeType":"100","messageId":"101","endLine":168,"endColumn":25},{"ruleId":"98","severity":1,"message":"112","line":205,"column":19,"nodeType":"100","messageId":"101","endLine":205,"endColumn":25},{"ruleId":"98","severity":1,"message":"112","line":243,"column":19,"nodeType":"100","messageId":"101","endLine":243,"endColumn":25},{"ruleId":"98","severity":1,"message":"119","line":14,"column":9,"nodeType":"100","messageId":"101","endLine":14,"endColumn":13},{"ruleId":"98","severity":1,"message":"120","line":31,"column":12,"nodeType":"100","messageId":"101","endLine":31,"endColumn":14},{"ruleId":"98","severity":1,"message":"114","line":31,"column":15,"nodeType":"100","messageId":"101","endLine":31,"endColumn":20},{"ruleId":"102","severity":1,"message":"121","line":71,"column":7,"nodeType":"104","endLine":71,"endColumn":9,"suggestions":"122"},{"ruleId":"98","severity":1,"message":"112","line":114,"column":19,"nodeType":"100","messageId":"101","endLine":114,"endColumn":25},{"ruleId":"98","severity":1,"message":"112","line":153,"column":19,"nodeType":"100","messageId":"101","endLine":153,"endColumn":25},{"ruleId":"98","severity":1,"message":"99","line":7,"column":36,"nodeType":"100","messageId":"101","endLine":7,"endColumn":41},{"ruleId":"102","severity":1,"message":"123","line":46,"column":7,"nodeType":"104","endLine":46,"endColumn":9,"suggestions":"124"},"no-unused-vars","'Alert' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchCategories'. Either include it or remove the dependency array.","ArrayExpression",["125"],"no-native-reassign",["126"],"no-negated-in-lhs",["127"],"React Hook useEffect has missing dependencies: 'fetchGuruData' and 'query'. Either include them or remove the dependency array.",["128"],"'result' is assigned a value but never used.","'query' is assigned a value but never used.","'setId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchAvailability'. Either include it or remove the dependency array.",["129"],"'withRouter' is defined but never used.",["130"],"'Link' is defined but never used.","'id' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchGuru'. Either include it or remove the dependency array.",["131"],"React Hook useEffect has a missing dependency: 'fetchFilters'. Either include it or remove the dependency array.",["132"],{"desc":"133","fix":"134"},"no-global-assign","no-unsafe-negation",{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},{"desc":"133","fix":"139"},{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},"Update the dependencies array to be: [fetchCategories]",{"range":"144","text":"145"},"Update the dependencies array to be: [fetchGuruData, query]",{"range":"146","text":"147"},"Update the dependencies array to be: [fetchAvailability]",{"range":"148","text":"149"},{"range":"150","text":"145"},"Update the dependencies array to be: [fetchGuru]",{"range":"151","text":"152"},"Update the dependencies array to be: [fetchFilters]",{"range":"153","text":"154"},[1792,1794],"[fetchCategories]",[6274,6276],"[fetchGuruData, query]",[9029,9031],"[fetchAvailability]",[1795,1797],[2336,2338],"[fetchGuru]",[1780,1782],"[fetchFilters]"]