[{"C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\index.js":"1","C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\Layout\\Layout.jsx":"2","C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\routes.js":"3","C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\Unauthorized\\Unauthorized.jsx":"4","C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\addAvailability\\addAvailability.js":"5","C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\updateGuru\\updateGuru.js":"6","C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\addNewGuru\\addNewGuru.js":"7","C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\addNewVideo\\addNewVideo.js":"8"},{"size":967,"mtime":1611108826032,"results":"9","hashOfConfig":"10"},{"size":780,"mtime":1610012749198,"results":"11","hashOfConfig":"10"},{"size":1509,"mtime":1611111059126,"results":"12","hashOfConfig":"10"},{"size":338,"mtime":1611117488439,"results":"13","hashOfConfig":"10"},{"size":15837,"mtime":1611745834749,"results":"14","hashOfConfig":"10"},{"size":49890,"mtime":1611747147932,"results":"15","hashOfConfig":"10"},{"size":41942,"mtime":1611747293727,"results":"16","hashOfConfig":"10"},{"size":29562,"mtime":1611748081641,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"545yc0",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\index.js",[],"C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\Layout\\Layout.jsx",[],"C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\routes.js",[],"C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\Unauthorized\\Unauthorized.jsx",[],"C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\addAvailability\\addAvailability.js",["35","36","37"],"import React, { useEffect,useState, useRef} from 'react'\r\nimport { Container, Row, Col, FormGroup, Spinner,Label } from 'reactstrap';\r\nimport { enGB } from 'date-fns/locale';\r\nimport { DatePickerCalendar } from 'react-nice-dates';\r\nimport { Calendar } from 'primereact/calendar';\r\nimport { TabView, TabPanel } from 'primereact/tabview';\r\nimport {Toast} from \"primereact/toast\";\r\nimport {useLocation} from \"react-router-dom\";\r\nimport 'react-nice-dates/build/style.css';\r\nimport \"./style.css\";\r\nimport { format } from 'date-fns';\r\nimport {useSelector} from \"react-redux\";\r\nimport Unauthorized from '../Unauthorized/Unauthorized';\r\nimport { RadioButton } from 'primereact/radiobutton';\r\nimport { ListBox } from 'primereact/listbox';\r\nfunction AddAvailability() {\r\n    const query = new URLSearchParams(useLocation().search);\r\n    const auth = useSelector((state)=>state.auth);\r\n    const toast = useRef(null);\r\n    const toast1 = useRef(null);\r\n    const [date,setDate] = useState(null);\r\n    const [availability,setAvailability] = useState([]);\r\n    const [morningSlots,setMorningSlots] = useState({\r\n      display:[],\r\n      all:[]\r\n    });\r\n    const [afternoonSlots,setAfternoonSlots] = useState({\r\n      display:[],\r\n      all:[],\r\n    });\r\n    const [eveningSlots,setEveningSlots] = useState({\r\n      display:[],\r\n      all:[],\r\n    });\r\n    const [startTime,setStartTime] = useState(new Date(\"Mon Jan 11 2021 8:00:01 GMT+0530 (India Standard Time)\"));\r\n    const [endTime,setEndTime] = useState(new Date(\"Mon Jan 11 2021 8:20:01 GMT+0530 (India Standard Time)\"));\r\n    const [loading,setLoading] = useState(false);\r\n    const [uploading,setUploading] = useState(false);\r\n    const [activeTime,setActiveTime] = useState(20);\r\n    const [activeIndex,setActiveIndex] = useState(0);\r\n    const fillSlots = async(selectedDate)=>{\r\n      const morning=[],afternoon =[],evening=[];\r\n      if(selectedDate){\r\n        availability.forEach((slot)=>{\r\n          if(slot.Date===format(selectedDate,\"yyyy/MM/dd\",{locale:enGB})){\r\n            slot.blocks.forEach((timeSlot)=>{\r\n              timeSlot.timeSlots.forEach((ts)=>{\r\n                let hour = parseInt(ts.startTime.split(\":\")[0],10);\r\n                if(hour<12){\r\n                  morning.push(ts);\r\n                }\r\n                else if (hour>=12 &&hour<17){\r\n                  afternoon.push(ts);\r\n                }\r\n                else{\r\n                  evening.push(ts);\r\n                }\r\n              })\r\n              \r\n            })\r\n          }\r\n        });\r\n      }\r\n      \r\n      console.log(morning,afternoon,evening);\r\n      setMorningSlots({\r\n        display:morning,\r\n        all:morning,\r\n      });\r\n      setAfternoonSlots({\r\n        display:afternoon,\r\n        all:afternoon,\r\n      });\r\n      setEveningSlots({\r\n        display:evening,\r\n        all:evening\r\n      });\r\n        \r\n    }\r\n    const fetchAvailability = async() =>{\r\n        setLoading(true);\r\n        // setTimeout(()=>{\r\n        //   fillSlots().then(()=>{\r\n        //     setActiveTime(20);\r\n        //     setLoading(false);\r\n        //   });  \r\n        // },2000);\r\n        const id =  query.get(\"id\");\r\n        return fetch(`https://j6lw75i817.execute-api.us-east-2.amazonaws.com/v1/gurus/${id}/availability`).then(response=>{\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n        }).then(jsonResponse=>{\r\n            return jsonResponse;\r\n        })\r\n        .then(result=>{\r\n            console.log(result.body);\r\n            setAvailability(result.body);\r\n        }).catch(error=>{\r\n            console.log(error);\r\n        });\r\n    }\r\n    const handleDurationChange = (event)=>{\r\n      setLoading(true)\r\n      setActiveTime(event.value);\r\n      const duration = event.value;\r\n      const callback = (slot)=>{\r\n        switch(duration){\r\n          case 20:\r\n            return true;\r\n          case 40:\r\n            let result;\r\n            let endMinute = slot.startMinute+40;\r\n            let endHour = slot.startHour;\r\n            if(endMinute>=60){\r\n              endMinute=endMinute%60;\r\n              endHour+=1;\r\n            }\r\n            availability.forEach((a)=>{\r\n              a.blocks.forEach(timeSlot=>{\r\n                timeSlot.timeSlots.forEach((ts)=>{\r\n                  console.log(timeSlot.endTime);\r\n                  if((ts.startHour===endHour&&ts.startMinute===endMinute)||(endHour===parseInt(timeSlot.endTime.split(\":\")[0],10)&&endMinute===parseInt(timeSlot.endTime.split(\":\")[1],10))){\r\n                    result=true;\r\n                  }\r\n                })\r\n              })\r\n            })\r\n            if(!result){\r\n              result=false;\r\n            }\r\n            return result;\r\n          case 60:\r\n            let result2;\r\n            let endMin = slot.startMinute+60;\r\n            let endHr = slot.startHour;\r\n            if(endMin>=60){\r\n              endMin=endMin%60;\r\n              endHr+=1;\r\n            }\r\n            availability.forEach((a)=>{\r\n              a.blocks.forEach(timeSlot=>{\r\n                timeSlot.timeSlots.forEach((ts)=>{\r\n                  if((ts.startHour===endHr&&ts.startMinute===endMin)||(endHr===parseInt(timeSlot.endTime.split(\":\")[0],10)&&endMin===parseInt(timeSlot.endTime.split(\":\")[1],10))){\r\n                    result2=true;\r\n                  }\r\n                })\r\n              })\r\n            })\r\n            if(!result2){\r\n              result2=false;\r\n            }\r\n            return result2;\r\n          default:\r\n            return false\r\n        }\r\n      }\r\n      setMorningSlots((prev)=>{\r\n        return {...prev,display:morningSlots.all.filter(callback)}\r\n      });\r\n      setAfternoonSlots((prev)=>{\r\n        return {...prev,display:afternoonSlots.all.filter(callback)}\r\n      });\r\n      setEveningSlots((prev)=>{\r\n        return {...prev,display:eveningSlots.all.filter(callback)}\r\n      });\r\n      setLoading(false);\r\n    }\r\n    const addSlot = ()=>{\r\n      let startHour = parseInt(format(startTime,'HH',{locale:enGB}),10);\r\n      let startMinute = parseInt(format(startTime,'mm',{locale:enGB}),10);\r\n      const endHour = parseInt(format(endTime,'HH',{locale:enGB}),10);\r\n      const endMinute = parseInt(format(endTime,'mm',{locale:enGB}),10);\r\n      let timeSlotList = [];\r\n      while(startHour<=endHour){\r\n        if(`${startHour}:${startMinute}`===`${endHour}:${endMinute}`){\r\n          break;\r\n        }\r\n        else{\r\n          if(startMinute===0){\r\n            timeSlotList.push({\r\n              startTime:`${startHour}:${startMinute}0`,\r\n              startHour:startHour,\r\n              startMinute:startMinute,\r\n              status:\"available\"\r\n            })\r\n          }\r\n          else{\r\n            timeSlotList.push({\r\n              startTime:`${startHour}:${startMinute}`,\r\n              startHour:startHour,\r\n              startMinute:startMinute,\r\n              status:\"available\"\r\n            })\r\n          }\r\n        }\r\n        startMinute+=20;\r\n        if(startMinute===60){\r\n          startHour+=1;\r\n          startMinute=0;\r\n        }\r\n      }\r\n      const block = {\r\n        startTime:format(startTime,\"HH:mm\",{locale:enGB}),\r\n        endTime:format(endTime,\"HH:mm\",{locale:enGB}),\r\n        timeSlots:timeSlotList\r\n      }\r\n      setUploading(true);\r\n      const fetchOptions = {\r\n        method:\"POST\",\r\n        headers:{\r\n          \"Content-Type\":\"application/json\"\r\n        },\r\n        body:JSON.stringify({timeZone:\"GMT\",date:format(date,'yyyy/MM/dd',{locale:enGB}),block:block})\r\n      }\r\n      console.log({timeZone:\"GMT\",date:format(date,'yyyy/MM/dd',{locale:enGB}),block:block});\r\n      const id = query.get('id');\r\n      fetch(`https://j6lw75i817.execute-api.us-east-2.amazonaws.com/v1/gurus/${id}/availability`,fetchOptions).then(response=>{\r\n        if(response.ok){\r\n          return response.json();\r\n        }\r\n        if(response.status===400&&response.message===\"booking already exists for this time, can not be added\"){\r\n            toast.current.show({severity: 'error', summary: 'Slot already exists', detail: 'Sorry please choose another slot',life:5000});\r\n            setUploading(false);\r\n        }\r\n      }).then(jsonResponse=>{\r\n        return jsonResponse;\r\n      }).then(res=>{\r\n        toast1.current.show({severity: 'success', summary: 'Success', detail: `The slot was added to ${format(date,\"yyyy/MM/dd\",{locale:enGB})}`});\r\n        setStartTime(new Date(\"Mon Jan 11 2021 8:00:01 GMT+0530 (India Standard Time)\"));\r\n        setEndTime(new Date(\"Mon Jan 11 2021 8:20:01 GMT+0530 (India Standard Time)\"));\r\n        setUploading(false);\r\n      })\r\n    }\r\n    const listOptionTemplate = (option) => {\r\n      if(option){\r\n        return (\r\n          <div className=\"listOption-container\">\r\n              <div>{option.startTime}</div>\r\n          </div>\r\n        );\r\n      }\r\n      return  <div className=\"noSlot-label\">No slot available</div>\r\n    }\r\n    useEffect(() => {\r\n      fetchAvailability();\r\n    }, [activeIndex,date])\r\n    useEffect(()=>{\r\n      fillSlots(date).then(()=>{\r\n        setActiveTime(20);\r\n        setLoading(false);\r\n      });\r\n    },[availability]);\r\n    const changeDate = async(date)=>{\r\n      setDate(date);\r\n    }\r\n    return (\r\n        <> \r\n          <Toast ref={toast} position=\"bottom-right\"></Toast>\r\n          <Toast ref={toast1} position=\"bottom-right\"></Toast>\r\n          {auth.idToken ? \r\n            <section className=\"section\">\r\n            <Container style={{ maxWidth: '80vw', margin: '0 auto' }}>\r\n                <Row style={{ display: 'flex', justifyContent: 'center' }}>\r\n                <Col md={5} sm={12} className=\"form-container\">\r\n                    <div\r\n                    style={{ border: '1px solid rgba(0,0,0,0.1)', width: '100%' }}\r\n                    >\r\n                        <DatePickerCalendar\r\n                            locale={enGB}\r\n                            date={date}\r\n                            onDateChange={changeDate}\r\n                        />\r\n                    </div>\r\n                    \r\n                </Col>\r\n                <Col md={{size:6,offset:1}} sm={12} className=\"form-container\">\r\n                    <h4 className=\"mt-3\">{date?`Selected Date: ${format(date, 'yyyy/MM/dd', { locale: enGB })}`:\"No date selected\"}</h4>\r\n                    {date?\r\n                    <TabView activeIndex={activeIndex} onTabChange={async (e)=>{\r\n                        setActiveIndex(e.index);\r\n                        \r\n                    }}>\r\n                        <TabPanel header=\"Add a slot\">\r\n                            <FormGroup className=\"form-group-container\">\r\n                                <label htmlFor=\"startTime\">Start Time</label>\r\n                                <Calendar id=\"startTime\" value={startTime} onChange={(e) => {\r\n                                    setStartTime(e.value)}}  timeOnly hourFormat=\"24\" stepMinute={20} className=\"w-75 ml-2\"/>\r\n                            </FormGroup>\r\n                            <FormGroup className=\"form-group-container\">\r\n                                <label htmlFor=\"startTime\">End Time</label>\r\n                                <Calendar id=\"startTime\" value={endTime} onChange={(e) => {\r\n                                    setEndTime(e.value)}}  timeOnly hourFormat=\"24\" stepMinute={20} className=\"w-75 ml-2\"/>\r\n                            </FormGroup>\r\n                            {uploading?\r\n                            <Spinner fill=\"black\"></Spinner>\r\n                            :\r\n                            <button className=\"book-btn\" onClick={addSlot}>\r\n                                  Add Slot\r\n                            </button>}\r\n                        </TabPanel>\r\n                        <TabPanel header=\"View Slots\">\r\n                            <div className=\"view-slot-container\">\r\n                                {loading?<Spinner color=\"#ff5001\" style={{margin:\"10px auto\"}}></Spinner>:\r\n                                <div className=\"showAvailability-container\">\r\n                                  <div className=\"timeSlot-container\">\r\n                                    <div className=\"p-field-radiobutton\">\r\n                                        <RadioButton inputId=\"20minuteSlot\" name=\"timeSlot\" value={20} onChange={handleDurationChange} checked={activeTime === 20} />\r\n                                        <label htmlFor=\"20minuteSlot\">20 minutes</label>\r\n                                    </div>\r\n                                    <div className=\"p-field-radiobutton\">\r\n                                        <RadioButton inputId=\"40minuteSlot\" name=\"timeSlot\" value={40} onChange={handleDurationChange} checked={activeTime === 40} />\r\n                                        <label htmlFor=\"40minuteSlot\">40 minutes</label>\r\n                                    </div>\r\n                                    <div className=\"p-field-radiobutton\">\r\n                                        <RadioButton inputId=\"60minuteSlot\" name=\"timeSlot\" value={60} onChange={handleDurationChange} checked={activeTime === 60} />\r\n                                        <label htmlFor=\"city3\">60 minutes</label>\r\n                                    </div>\r\n                                  </div>\r\n                                  <div className=\"list-container\">\r\n                                    <div className=\"morning-list\">\r\n                                      <h5>Morning</h5>\r\n                                      <ListBox options={morningSlots.display} filter optionLabel=\"startTime\"\r\n                                        itemTemplate={listOptionTemplate} style={{width: '15rem'}} listStyle={{height: '150px'}} />\r\n                                    </div>\r\n                                    <div className=\"afternoon-list\">\r\n                                      <h5>Afternoon</h5>\r\n                                      <ListBox options={afternoonSlots.display} filter optionLabel=\"startTime\"\r\n                                        itemTemplate={listOptionTemplate} style={{width: '15rem'}} listStyle={{height: '150px'}} />\r\n                                    </div>\r\n                                    <div className=\"evening-list\">\r\n                                      <h5>Evening</h5>\r\n                                      <ListBox  options={eveningSlots.display} filter optionLabel=\"startTime\"\r\n                                        itemTemplate={listOptionTemplate} style={{width: '15rem'}} listStyle={{height: '150px'}} />\r\n                                    </div>\r\n\r\n                                  </div>\r\n\r\n                                </div>\r\n\r\n                                \r\n\r\n                                // <div\r\n                                // style={{\r\n                                //     display: 'flex',\r\n                                //     justifyContent: 'center',\r\n                                //     border: '1px solid rgba(0,0,0,0.1)'\r\n                                // }}\r\n                                // >\r\n                                //     <ul className=\"timeSlotList mx-5\" id=\"morningList\"></ul>\r\n                                //     <ul className=\"timeSlotList mx-5\" id=\"afternoonList\"></ul>\r\n                                //     <ul className=\"timeSlotList mx-5\" id=\"eveningList\"></ul>\r\n                                // </div>\r\n                                }\r\n                            </div>\r\n                            \r\n                        </TabPanel>\r\n                    </TabView>\r\n                    :\r\n                    null\r\n                    }\r\n                </Col>\r\n                </Row>\r\n            </Container>\r\n            </section>\r\n          :\r\n            <Unauthorized/>\r\n          }\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddAvailability\r\n","C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\updateGuru\\updateGuru.js",["38","39","40","41"],"C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\addNewGuru\\addNewGuru.js",["42","43","44"],"C:\\Users\\SAATVIK\\Desktop\\projects\\reset-adminportal\\src\\views\\addNewVideo\\addNewVideo.js",["45","46","47","48","49","50"],{"ruleId":"51","severity":1,"message":"52","line":2,"column":50,"nodeType":"53","messageId":"54","endLine":2,"endColumn":55},{"ruleId":"55","severity":1,"message":"56","line":247,"column":8,"nodeType":"57","endLine":247,"endColumn":26,"suggestions":"58"},{"ruleId":"55","severity":1,"message":"59","line":253,"column":7,"nodeType":"57","endLine":253,"endColumn":21,"suggestions":"60"},{"ruleId":"55","severity":1,"message":"61","line":170,"column":7,"nodeType":"57","endLine":170,"endColumn":9,"suggestions":"62"},{"ruleId":"51","severity":1,"message":"63","line":205,"column":19,"nodeType":"53","messageId":"54","endLine":205,"endColumn":25},{"ruleId":"51","severity":1,"message":"63","line":242,"column":19,"nodeType":"53","messageId":"54","endLine":242,"endColumn":25},{"ruleId":"51","severity":1,"message":"63","line":280,"column":19,"nodeType":"53","messageId":"54","endLine":280,"endColumn":25},{"ruleId":"51","severity":1,"message":"63","line":183,"column":19,"nodeType":"53","messageId":"54","endLine":183,"endColumn":25},{"ruleId":"51","severity":1,"message":"63","line":220,"column":19,"nodeType":"53","messageId":"54","endLine":220,"endColumn":25},{"ruleId":"51","severity":1,"message":"63","line":258,"column":19,"nodeType":"53","messageId":"54","endLine":258,"endColumn":25},{"ruleId":"51","severity":1,"message":"64","line":14,"column":9,"nodeType":"53","messageId":"54","endLine":14,"endColumn":13},{"ruleId":"51","severity":1,"message":"65","line":34,"column":12,"nodeType":"53","messageId":"54","endLine":34,"endColumn":14},{"ruleId":"51","severity":1,"message":"66","line":34,"column":15,"nodeType":"53","messageId":"54","endLine":34,"endColumn":20},{"ruleId":"55","severity":1,"message":"67","line":74,"column":7,"nodeType":"57","endLine":74,"endColumn":9,"suggestions":"68"},{"ruleId":"51","severity":1,"message":"63","line":117,"column":19,"nodeType":"53","messageId":"54","endLine":117,"endColumn":25},{"ruleId":"51","severity":1,"message":"63","line":156,"column":19,"nodeType":"53","messageId":"54","endLine":156,"endColumn":25},"no-unused-vars","'Label' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchAvailability'. Either include it or remove the dependency array.","ArrayExpression",["69"],"React Hook useEffect has missing dependencies: 'date' and 'fillSlots'. Either include them or remove the dependency array.",["70"],"React Hook useEffect has missing dependencies: 'fetchGuruData' and 'query'. Either include them or remove the dependency array.",["71"],"'result' is assigned a value but never used.","'Link' is defined but never used.","'id' is assigned a value but never used.","'setId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchGuru'. Either include it or remove the dependency array.",["72"],{"desc":"73","fix":"74"},{"desc":"75","fix":"76"},{"desc":"77","fix":"78"},{"desc":"79","fix":"80"},"Update the dependencies array to be: [activeIndex, date, fetchAvailability]",{"range":"81","text":"82"},"Update the dependencies array to be: [availability, date, fillSlots]",{"range":"83","text":"84"},"Update the dependencies array to be: [fetchGuruData, query]",{"range":"85","text":"86"},"Update the dependencies array to be: [fetchGuru]",{"range":"87","text":"88"},[8958,8976],"[activeIndex, date, fetchAvailability]",[9107,9121],"[availability, date, fillSlots]",[6425,6427],"[fetchGuruData, query]",[2486,2488],"[fetchGuru]"]